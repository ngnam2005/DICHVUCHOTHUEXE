const express = require("express");
const Vehicle = require("../models/Vehicle");
const upload = require("../config/multer");

const router = express.Router();

//T·∫°o xe m·ªõi (c√≥ h·ªó tr·ª£ upload nhi·ªÅu ·∫£nh)
router.post("/add", upload.array("images", 5), async (req, res) => {
    try {
        const { name, brand, yearManufactured, rentalPricePerDay, type, status } = req.body;

        // üåü L·∫•y danh s√°ch ·∫£nh ƒë√£ upload
        const imageUrls = req.files ? req.files.map(file => `/uploads/${file.filename}`) : [];

        const newVehicle = new Vehicle({
            name,
            brand,
            yearManufactured,
            rentalPricePerDay,
            type,
            status,
            images: imageUrls, // üåü L∆∞u danh s√°ch ·∫£nh
        });

        await newVehicle.save();
        res.status(201).json(newVehicle);
    } catch (error) {
        res.status(500).json({ error: "Failed to create vehicle" });
    }
});

//C·∫≠p nh·∫≠t th√¥ng tin xe (c√≥ h·ªó tr·ª£ update nhi·ªÅu ·∫£nh)
router.put("/update/:id", upload.array("images", 5), async (req, res) => {
    try {
        const { name, brand, yearManufactured, rentalPricePerDay, type, status } = req.body;
        const updateData = { name, brand, yearManufactured, rentalPricePerDay, type, status };

        // üåü N·∫øu c√≥ ·∫£nh m·ªõi, c·∫≠p nh·∫≠t danh s√°ch ·∫£nh
        if (req.files) updateData.images = req.files.map(file => `/uploads/${file.filename}`);

        const updatedVehicle = await Vehicle.findByIdAndUpdate(req.params.id, updateData, { new: true });
        if (!updatedVehicle) return res.status(404).json({ error: "Vehicle not found" });

        res.json(updatedVehicle);
    } catch (error) {
        res.status(500).json({ error: "Failed to update vehicle" });
    }
});

//L·∫•y danh s√°ch xe (populate type)
router.get("/getAll", async (req, res) => {
    try {
        const vehicles = await Vehicle.find().populate("type", "name description");
        res.json(vehicles);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch vehicles" });
    }
});

//L·∫•y th√¥ng tin xe theo ID (c√≥ danh s√°ch ·∫£nh)
router.get("/getById/:id", async (req, res) => {
    try {
        const vehicle = await Vehicle.findById(req.params.id).populate("type", "name description");
        if (!vehicle) return res.status(404).json({ error: "Vehicle not found" });

        res.json(vehicle);
    } catch (error) {
        res.status(500).json({ error: "Failed to fetch vehicle" });
    }
});

//X√≥a xe
router.delete("/delete/:id", async (req, res) => {
    try {
        const deletedVehicle = await Vehicle.findByIdAndDelete(req.params.id);
        if (!deletedVehicle) return res.status(404).json({ error: "Vehicle not found" });

        res.json({ message: "Vehicle deleted successfully" });
    } catch (error) {
        res.status(500).json({ error: "Failed to delete vehicle" });
    }
});

//T√¨m ki·∫øm xe theo t√™n
router.get("/search", async (req, res) => {
    try {
        const { name } = req.query;

        if (!name) {
            return res.status(400).json({ error: "Vui l√≤ng cung c·∫•p t√™n xe ƒë·ªÉ t√¨m ki·∫øm" });
        }

        const vehicles = await Vehicle.find({
            name: { $regex: name, $options: "i" } // t√¨m g·∫ßn ƒë√∫ng, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
        }).populate("type", "name description");

        res.json(vehicles);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi t√¨m ki·∫øm xe" });
    }
});

router.get("/getByType/:typeId", async (req, res) => {
    try {
        const { typeId } = req.params;

        // Fetch vehicles by typeId and populate the 'type' field with the 'name' field
        const vehicles = await Vehicle.find({ type: typeId }).populate("type", "name");

        if (vehicles.length === 0) {
            // If no vehicles are found, send a 404 response
            return res.status(404).json({ message: "Kh√¥ng c√≥ xe n√†o thu·ªôc lo·∫°i n√†y" });
        }

        // Send the vehicles in the response
        return res.json(vehicles);  // The response should be sent once
    } catch (error) {
        // If an error occurs, send a 500 response
        res.status(500).json({ error: "L·ªói khi t√¨m xe theo lo·∫°i" });
    }
});

module.exports = router;
